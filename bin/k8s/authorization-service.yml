apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # networking.gke.io/v1beta1.FrontendConfig: "joshlong-authorization-api-frontend-config"
    ingress.kubernetes.io/force-ssl-redirect: "true"
    networking.gke.io/managed-certificates: "authorization-service-certificate"
    kubernetes.io/ingress.global-static-ip-name: "mogul-authorization-service-ip"
  name: authorization-service-ingress
spec:
  defaultBackend:
    service:
      name: authorization-service
      port:
        number: 80

---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate

metadata:
  name: authorization-service-certificate
spec:
  domains:
    - auth.media-mogul.io


---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: authorization-service
  name: authorization-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authorization-service
  template:
    metadata:
      labels:
        app: authorization-service
    spec:
      containers:
        - image: us-docker.pkg.dev/joshlong/mogul-artifact-registry/authorization-service:latest
          imagePullPolicy: Always
          name: authorization-service

          startupProbe:
            failureThreshold: 100
            periodSeconds: 10
            httpGet:
              port: 8080
              path: /actuator/health/readiness

          readinessProbe:
            failureThreshold: 100
            periodSeconds: 10
            httpGet:
              port: 8080
              path: /actuator/health/readiness

          livenessProbe:
            failureThreshold: 100
            periodSeconds: 10
            httpGet:
              port: 8080
              path: /actuator/health/liveness


          envFrom:
            - secretRef:
                name: mogul-secrets

          resources:
            limits:
              memory: "1Gi"
            requests:
              memory: "1Gi"

          env:

            - name: SERVER_PORT
              value: "8080"
            - name: LANG
              value: "en_US.UTF-8"

          ports:
            - containerPort: 8080


---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
  labels:
    app: authorization-service
  name: authorization-service
spec:
  ports:
    - port: 80
      targetPort: 8080
      name: http
  selector:
    app: authorization-service
  type: LoadBalancer